// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pastinha.Base.Database;

#nullable disable

namespace Pastinha.Base.Migrations
{
    [DbContext(typeof(PastinhaContext))]
    [Migration("20250608163258_V1")]
    partial class V1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Pastinha.Base.Model.Authentication.AuthenticationSenior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authentication");
                });

            modelBuilder.Entity("Pastinha.Base.Model.Authentication.AuthenticationSeniorWithKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuthenticationWithKey");
                });

            modelBuilder.Entity("Pastinha.Base.Model.DataFileProcessed.CountDataFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountImage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountOtherFormat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountPDF")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountSendPlatform")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateProcess")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateProcess")
                        .IsDescending();

                    b.ToTable("CountDataFiles");
                });

            modelBuilder.Entity("Pastinha.Base.Model.EmcGed.FolderListPageableSenior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllFolder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdFolder")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FolderListPageables");
                });

            modelBuilder.Entity("Pastinha.Base.Model.Employee.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomFun")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumCad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumEmp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SitAfa")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipCol")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NumEmp", "TipCol", "NumCad")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Pastinha.Base.Model.Endpoint.BaseUrlSenior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UrlBase")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UrlDevSenior")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BaseUrls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Base Url",
                            UrlBase = "https://platform.senior.com.br/t/senior.com.br/bridge/1.0/rest/platform",
                            UrlDevSenior = "https://dev.senior.com.br/apis_privadas/"
                        });
                });

            modelBuilder.Entity("Pastinha.Base.Model.Endpoint.EndpointPastinhaSenior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UrlDevSenior")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EndpointsPastinha");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Endpoint = "/authentication/actions/login",
                            Name = "Login",
                            Type = "Publico",
                            UrlDevSenior = "https://dev.senior.com.br/api_privada/platform_authentication/"
                        },
                        new
                        {
                            Id = 2,
                            Endpoint = "/authentication/actions/loginWithKey",
                            Name = "LoginWithKey",
                            Type = "Publico",
                            UrlDevSenior = "https://dev.senior.com.br/api_privada/platform_authentication/"
                        },
                        new
                        {
                            Id = 3,
                            Endpoint = "/ecm_ged/entities/draftDocument",
                            Name = "DraftDocument",
                            Type = "Privado",
                            UrlDevSenior = "https://dev.senior.com.br/api_privada/platform_ecm_ged/"
                        },
                        new
                        {
                            Id = 4,
                            Endpoint = "/ecm_ged/entities/document",
                            Name = "Document",
                            Type = "Privado",
                            UrlDevSenior = "https://dev.senior.com.br/api_privada/platform_ecm_ged/"
                        },
                        new
                        {
                            Id = 5,
                            Endpoint = "/ecm_ged/actions/approveDocumentVersion",
                            Name = "ApproveDocumentVersion",
                            Type = "Publico",
                            UrlDevSenior = "https://dev.senior.com.br/api_privada/platform_ecm_ged/"
                        },
                        new
                        {
                            Id = 6,
                            Endpoint = "/ecm_ged/queries/searchDocument",
                            Name = "SearchDocument",
                            Type = "Publico",
                            UrlDevSenior = "https://dev.senior.com.br/api_privada/platform_ecm_ged/"
                        },
                        new
                        {
                            Id = 7,
                            Endpoint = "/ecm_ged/queries/folderListPageable",
                            Name = "FolderListPageable",
                            Type = "Privado",
                            UrlDevSenior = "https://dev.senior.com.br/api_privada/platform_ecm_ged/"
                        },
                        new
                        {
                            Id = 8,
                            Endpoint = "/ecm_ged/queries/searchDocumentByProperties",
                            Name = "SearchDocumentByProperties",
                            Type = "Publico",
                            UrlDevSenior = "https://dev.senior.com.br/api_privada/platform_ecm_ged/"
                        },
                        new
                        {
                            Id = 9,
                            Endpoint = "/ecm_ged/actions/moveDocumentBulk",
                            Name = "MoveDocumentBulk",
                            Type = "Publico",
                            UrlDevSenior = "https://dev.senior.com.br/api_privada/platform_ecm_ged/"
                        },
                        new
                        {
                            Id = 10,
                            Endpoint = "/ecm_ged/actions/moveDocument",
                            Name = "MoveDocument",
                            Type = "Publico",
                            UrlDevSenior = "https://dev.senior.com.br/api_privada/platform_ecm_ged/"
                        },
                        new
                        {
                            Id = 11,
                            Endpoint = "/ecm_ged/entities/folder",
                            Name = "Folder",
                            Type = "Privado",
                            UrlDevSenior = "https://dev.senior.com.br/api_privada/platform_ecm_ged/"
                        });
                });

            modelBuilder.Entity("Pastinha.Base.Model.FileProcessed.FileProcessed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmountProcessed")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateProcessed")
                        .HasColumnType("TEXT");

                    b.Property<string>("NomDoc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumCad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumEmp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipCol")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NumEmp", "TipCol", "NumCad", "NomDoc", "DateProcessed")
                        .IsUnique();

                    b.ToTable("FileProcesseds");
                });

            modelBuilder.Entity("Pastinha.Base.Model.Fired.StatusFired", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodeStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StatusFireds");
                });

            modelBuilder.Entity("Pastinha.Base.Model.Folder.FolderOfflinePastinhaSenior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOffline")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PathOffline")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FoldersOffline");
                });

            modelBuilder.Entity("Pastinha.Base.Model.Folder.FolderPastinhaSenior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysDelete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PathError")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PathInput")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PathLog")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PathOutput")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FoldersPastinha");
                });
#pragma warning restore 612, 618
        }
    }
}
